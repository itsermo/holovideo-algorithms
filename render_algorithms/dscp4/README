== DSCP4 Holovideo Algorithm README ==

 1.) Prerequisites
 2.) Dependencies
 3.) Building
 4.) Installing
 5.) Configuring
 6.) Running
 
== 1. PREREQUISITES ==

 This project requires:
  * Cross-platform Make (CMake) v2.8.2+
  * GNU Make or equivalent.
  * GCC-4.8.2+ C++11 capable compiler.
  * Boost C++ Libraries v1.54+ [HEADERS and LIBRARIES]
  * OpenGL 3.1+ (for GLSL support, must have GPU that has OpenGL 3.1+ support)
  * GLEW 1.11.0+ (OpenGL Extension Wrangler, required for running GLSL shaders)
  * GLM 0.9.6.1+ (header-only library for common OpenGL math functions,
	such as matrix multiplication)
  * SDL 2.0.1+ (takes care of window management, OpenGL render contexts)
  * CUDA 6.5 (all fringe computation is done in CUDA)
  * Log4Cxx v0.10.0+ (optional, for logging errors and info)
  * ASSIMP 3.1.1+ (for importing 3D object files, like .ply files)
  
 DSCP4 is a CMAKE package, that contains two projects:
 
  * libdscp4 - the render library that implements DSCP and computes fringe patterns
  * dscp4 - the "test" program that loads 3D model files and feeds 3D model data 
		to libdscp4 and controls the rendering through calls to libdscp4 
		
 CMAKE is a cross-platform make tool that allows one to generate make projects
 for specific compilers.  For example, we can use CMAKE to generate a
 Visual Studio, Eclipse, or standard GNU Make project which then can be
 compiled, debugged or installed from the respective OS and toolchain.

== 2. DEPENDENCIES ==

 Installing the above dependencies can be done mostly via your package manager,
 for example, in Ubuntu, you would type "sudo apt-get install <package-name>".
 Here is how to do this in Ubuntu:
 
 a) Install the dependenices using the command below:
 
	sudo apt-get install cmake gcc-4.8 g++-4.8 libboost-all-dev libglew-dev \
	libglm-dev libsdl2-dev libassimp-dev liblog4cxx10-dev
 
 b) Change your compiler to gcc-4.8, as Ubuntu ships with gcc-4.7 per default:
 
	sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 50
	
	The previous command adds gcc-4.8 to the list with 50 priority, then
	we can select gcc-4.8 as the default by typing the following:
	
	sudo update-alternatives --config gcc
 
 c) Install CUDA 6.5 by navigating to https://developer.nvidia.com/cuda-downloads
    download the 64-bit "RUN" file for x86 Linux, Ubuntu 14.04.

	Open up the terminal, navigate to the download folder and run the .RUN file:
	
	chmod +x cuda_6.15.14_linux_64.run
	sudo ./cuda_6.15.14_linux_64.run
	
	The "chmod" command gives the file executable permission,
	running the file with "./" will execute and install the cuda libraries
  
== 3. BUILDING ==
 
 This project uses the Cross-platform Make (CMake) build system. However, we
 have conveniently provided a wrapper configure script and Makefile so that
 the typical build invocation of "./configure" followed by "make" will work.
 For a list of all possible build targets, use the command "make help".
 
 If you're comfortable with CMAKE, feel free to generate and compile like so:
 
	 cd build
	 cmake ..
	 make
	 sudo make install
 
 NOTE: Users of CMake may believe that the top-level Makefile has been
 generated by CMake; it hasn't, so please do not delete that file.
 
 Here are some available options that can be used:
 
 -DBUILD_DSCP4_APP={YES|NO} (If this is NO, only the DSCP4 library will be
							 built, and libdscp4.so dscp4.h will be installed.
							 This is probably not what you want.)

 -DWITH_LIBLOG4CXX={YES|NO} (If, for whatever reason, you despise console output
							 or can't install liblog4cxx, this can turn off
							 all dependencies to log4cxx and turn off logging)


 These can be used like so:

	./configure -DWITH_LIBLOG4CXX=NO
 
 or
 
	cd build
	cmake -DWITH_LIBLOG4CXX=NO ..
							 
 == 4. INSTALLING ==

 Once the project has been built (see "BUILDING"), execute "sudo make install".
 
 The install function will copy:
  * dscp4 executable to /usr/local/bin
  * model files to /usr/local/dscp4/models
  * shader files to /usr/local/dscp4/shaders
  * dscp4.conf to /etc/dscp4
 
 == 5. CONFIGURING ==
 
 You can set some program, algorithm and display options by editing the file
 /etc/dscp4/dscp4.conf
 
 == 6. RUNNING ==
 
 Just type dscp4 anywhere in the command line.  For example:
 
 dscp4 --help
 
 Will print out all of the command options
 
 dscp4 -i dragon.ply
 
 Will open dscp4 with the dragon.ply model file.  First it will search for
 "dragon.ply" locally, if it can't be found, it will navigate to the
 model_path, as defined by /etc/dscp4.conf and look for the file there.
 
 
