== DSCP4 Holovideo Algorithm README ==

 1.) Prerequisites
 2.) Dependencies
 3.) Building
 4.) Installing
 5.) Configuring
 6.) Running
 7.) Uninstalling
 
== 1. PREREQUISITES ==

 This project requires:
  * Cross-platform Make (CMake) v2.8.2+
  * GNU Make or equivalent.
  * GCC-4.8.2+ C++11 capable compiler.
  * Boost C++ Libraries v1.54+ [HEADERS and LIBRARIES]
  * OpenGL 3.1+ (for GLSL support, must have GPU that has OpenGL 3.1+ support)
  * GLEW 1.11.0+ (OpenGL Extension Wrangler, required for running GLSL shaders)
  * GLM 0.9.6.1+ (header-only library for common OpenGL math functions,
	such as matrix multiplication)
  * SDL 2.0.1+ (takes care of window management, OpenGL render contexts)
  * CUDA 6.5 (all fringe computation is done in CUDA)
  * Log4Cxx v0.10.0+ (optional, for logging errors and info)
  * ASSIMP 3.1.1+ (for importing 3D object files, like .ply files)
  
 DSCP4 is a CMAKE package, that is composed of two C++ projects:
 
  * libdscp4 - the render library that implements DSCP and computes fringe
               patterns. libdscp4 is built as a shared library with C-linkage.
               It generates libdscp4.so and dscp4.h files, which are installed
               to /usr/local/lib and /usr/local/include respectively. The
               dscp4.h file includes functions to turn initialize the renderer,
               change renderer settings, add 3d model vertices and color, and
               manipulate 3d models in the renderer.

  * dscp4    - the "test" program that loads 3D model files and feeds 3D model 
               data to libdscp4 and controls the rendering through libdscp4.
               This program builds as an executable and is installed to
               /usr/local/bin, and can be run anywhere from the command line.
               This program can be built optionally, but if you want to see
               stuff on the holovideo display, you'll have toi use this or
               write your own program that references libdscp4 and feeds it 3d
               model vertices, colors, normals, etc.
		
 CMAKE is a cross-platform make tool that allows one to generate make projects
 for specific compilers.  For example, we can use CMAKE to generate a
 Visual Studio, Eclipse, or standard GNU Make project which then can be
 compiled, debugged or installed from the respective OS and toolchain.

 This readme will show you how to generate a GNU Make project, that can be
 compiled and installed from the command line on Linux.

== 2. DEPENDENCIES ==

 Installing the above dependencies can be done mostly via your package manager,
 for example, in Ubuntu, you would type "sudo apt-get install <package-name>".
 Here is how to do this in Ubuntu:
 
 a) Sync your package manager with the latest packages:
	
	sudo apt-get update
	sudo apt-get upgrade
 
 a) Install the dependenices using the command below:
 
	sudo apt-get install cmake g++ libboost-all-dev libglew-dev \
	libglm-dev libsdl2-dev libassimp-dev liblog4cxx10-dev
 
 c) Install CUDA 6.5 by navigating to 
    https://developer.nvidia.com/cuda-downloads
    download the 64-bit "RUN" file for x86 Linux, Ubuntu 14.04.i This can also
    be done with the wget command:

	cd ~/Downloads
	wget http://developer.download.nvidia.com/compute/cuda/6_5/rel/installers/cuda_6.5.14_linux_64.run

    Open up the terminal, navigate to the download folder and run the .RUN file:
	
	chmod +x cuda_6.5.14_linux_64.run
	sudo ./cuda_6.5.14_linux_64.run

    Say "NO" to installing accelerated graphics drivers, otherwise it may break
    your current setup.
	
    The "chmod" command gives the file executable permission so it can be run,
    running the file with "./" will execute and install the cuda libraries
  
== 3. BUILDING ==
 
 This project uses the Cross-platform Make (CMake) build system. However, we
 have conveniently provided a wrapper configure script and Makefile so that
 the typical build invocation of "./configure" followed by "make" will work.
 For a list of all possible build targets, use the command "make help".
 
 If you're comfortable with CMAKE, feel free to generate and compile like so:
 
	cd build
	cmake ..
	make
 
 NOTE: Users of CMake may believe that the top-level Makefile has been
 generated by CMake; it hasn't, so please do not delete that file.
 
 Here are some available options that can be used:
 
 -DBUILD_DSCP4_APP={YES|NO} (If this is NO, only the DSCP4 library will be
                            built, and libdscp4.so dscp4.h will be installed.
                            This is probably not what you want.)

 -DWITH_LIBLOG4CXX={YES|NO} (If, for whatever reason, you despise console output
                            or can't install liblog4cxx, this can turn off all 
                            dependencies to log4cxx and turn off logging)

 -DWITH_TRACE_LOG={YES|NO}  (Turns on performance logging. The act of logging
							can impact performance, so this is off by default)

 These can be used like so:

	./configure -DWITH_LIBLOG4CXX=NO
	make
 
 or
 
	cd build
	cmake -DWITH_LIBLOG4CXX=NO ..
	make
							 
 == 4. INSTALLING ==

 Once the project has been built (see "BUILDING"), enter the following command:

	sudo make install
 
 The install function will build (if necessary) copy (if files are newer):
  * dscp4 executable to /usr/local/bin
  * 3d model files from dscp4/models to /usr/local/dscp4/models
  * shader files from libdscp4/shaders to /usr/local/dscp4/shaders
  * it will generate dscp4.conf from dscp4.conf.in and copy to /etc/dscp4
 
 == 5. CONFIGURING ==
 
 You can set many program, algorithm and display options by editing the file
 '/etc/dscp4/dscp4.conf'. Please have a look at this file before you do any
 editing of code.
 
 == 6. RUNNING ==
 
 To run the program, just type 'dscp4' anywhere in the command line.
 For example:
 
 	dscp4 --help
 
 Will print out all of the command options.
 
	dscp4 -i dragon.ply
 
 Will open dscp4 with the dragon.ply model file.  First it will search for
 "dragon.ply" locally, if it can't be found, it will navigate to the
 model_path, as defined by /etc/dscp4.conf and look for the file there.
 
 == 7. UNINSTALLING ==
 
 Simply running the following command:
	
	sudo make uninstall

 Will delete all traces of dscp4 from your computer
